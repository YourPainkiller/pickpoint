// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cli/v1/cliserver.proto

package cliserver

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderDto with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderDto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderDto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderDtoMultiError, or nil
// if none found.
func (m *OrderDto) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderDto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ValidTime

	// no validation rules for State

	// no validation rules for Price

	// no validation rules for Weight

	// no validation rules for PackageType

	// no validation rules for AdditionalStretch

	if len(errors) > 0 {
		return OrderDtoMultiError(errors)
	}

	return nil
}

// OrderDtoMultiError is an error wrapping multiple validation errors returned
// by OrderDto.ValidateAll() if the designated constraints aren't met.
type OrderDtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderDtoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderDtoMultiError) AllErrors() []error { return m }

// OrderDtoValidationError is the validation error returned by
// OrderDto.Validate if the designated constraints aren't met.
type OrderDtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderDtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderDtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderDtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderDtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderDtoValidationError) ErrorName() string { return "OrderDtoValidationError" }

// Error satisfies the builtin error interface
func (e OrderDtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderDto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderDtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderDtoValidationError{}

// Validate checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderRequestMultiError, or nil if none found.
func (m *AcceptOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValidTime()) != 10 {
		err := AcceptOrderRequestValidationError{
			field:  "ValidTime",
			reason: "value length must be 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if m.GetPrice() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() <= 0 {
		err := AcceptOrderRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPackageType()); l < 3 || l > 6 {
		err := AcceptOrderRequestValidationError{
			field:  "PackageType",
			reason: "value length must be between 3 and 6 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AdditionalStretch

	if len(errors) > 0 {
		return AcceptOrderRequestMultiError(errors)
	}

	return nil
}

// AcceptOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AcceptOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AcceptOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderRequestMultiError) AllErrors() []error { return m }

// AcceptOrderRequestValidationError is the validation error returned by
// AcceptOrderRequest.Validate if the designated constraints aren't met.
type AcceptOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderRequestValidationError) ErrorName() string {
	return "AcceptOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderRequestValidationError{}

// Validate checks the field values on AcceptOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcceptOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcceptOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcceptOrderResponseMultiError, or nil if none found.
func (m *AcceptOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcceptOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcceptOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcceptOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcceptOrderResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcceptOrderResponseMultiError(errors)
	}

	return nil
}

// AcceptOrderResponseMultiError is an error wrapping multiple validation
// errors returned by AcceptOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type AcceptOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcceptOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcceptOrderResponseMultiError) AllErrors() []error { return m }

// AcceptOrderResponseValidationError is the validation error returned by
// AcceptOrderResponse.Validate if the designated constraints aren't met.
type AcceptOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOrderResponseValidationError) ErrorName() string {
	return "AcceptOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOrderResponseValidationError{}
