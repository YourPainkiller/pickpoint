// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i homework1/internal/usecase.orderRepository -o orderRepository_mock.go -n OrderRepositoryMock -p mock

import (
	"homework1/internal/dto"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderRepositoryMock implements mm_usecase.orderRepository
type OrderRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetOrders          func() (lp1 *dto.ListOrdersDto, err error)
	funcGetOrdersOrigin    string
	inspectFuncGetOrders   func()
	afterGetOrdersCounter  uint64
	beforeGetOrdersCounter uint64
	GetOrdersMock          mOrderRepositoryMockGetOrders

	funcInsertOrders          func(data *dto.ListOrdersDto) (err error)
	funcInsertOrdersOrigin    string
	inspectFuncInsertOrders   func(data *dto.ListOrdersDto)
	afterInsertOrdersCounter  uint64
	beforeInsertOrdersCounter uint64
	InsertOrdersMock          mOrderRepositoryMockInsertOrders
}

// NewOrderRepositoryMock returns a mock for mm_usecase.orderRepository
func NewOrderRepositoryMock(t minimock.Tester) *OrderRepositoryMock {
	m := &OrderRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetOrdersMock = mOrderRepositoryMockGetOrders{mock: m}

	m.InsertOrdersMock = mOrderRepositoryMockInsertOrders{mock: m}
	m.InsertOrdersMock.callArgs = []*OrderRepositoryMockInsertOrdersParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderRepositoryMockGetOrders struct {
	optional           bool
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockGetOrdersExpectation
	expectations       []*OrderRepositoryMockGetOrdersExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderRepositoryMockGetOrdersExpectation specifies expectation struct of the orderRepository.GetOrders
type OrderRepositoryMockGetOrdersExpectation struct {
	mock *OrderRepositoryMock

	results      *OrderRepositoryMockGetOrdersResults
	returnOrigin string
	Counter      uint64
}

// OrderRepositoryMockGetOrdersResults contains results of the orderRepository.GetOrders
type OrderRepositoryMockGetOrdersResults struct {
	lp1 *dto.ListOrdersDto
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetOrders *mOrderRepositoryMockGetOrders) Optional() *mOrderRepositoryMockGetOrders {
	mmGetOrders.optional = true
	return mmGetOrders
}

// Expect sets up expected params for orderRepository.GetOrders
func (mmGetOrders *mOrderRepositoryMockGetOrders) Expect() *mOrderRepositoryMockGetOrders {
	if mmGetOrders.mock.funcGetOrders != nil {
		mmGetOrders.mock.t.Fatalf("OrderRepositoryMock.GetOrders mock is already set by Set")
	}

	if mmGetOrders.defaultExpectation == nil {
		mmGetOrders.defaultExpectation = &OrderRepositoryMockGetOrdersExpectation{}
	}

	return mmGetOrders
}

// Inspect accepts an inspector function that has same arguments as the orderRepository.GetOrders
func (mmGetOrders *mOrderRepositoryMockGetOrders) Inspect(f func()) *mOrderRepositoryMockGetOrders {
	if mmGetOrders.mock.inspectFuncGetOrders != nil {
		mmGetOrders.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.GetOrders")
	}

	mmGetOrders.mock.inspectFuncGetOrders = f

	return mmGetOrders
}

// Return sets up results that will be returned by orderRepository.GetOrders
func (mmGetOrders *mOrderRepositoryMockGetOrders) Return(lp1 *dto.ListOrdersDto, err error) *OrderRepositoryMock {
	if mmGetOrders.mock.funcGetOrders != nil {
		mmGetOrders.mock.t.Fatalf("OrderRepositoryMock.GetOrders mock is already set by Set")
	}

	if mmGetOrders.defaultExpectation == nil {
		mmGetOrders.defaultExpectation = &OrderRepositoryMockGetOrdersExpectation{mock: mmGetOrders.mock}
	}
	mmGetOrders.defaultExpectation.results = &OrderRepositoryMockGetOrdersResults{lp1, err}
	mmGetOrders.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetOrders.mock
}

// Set uses given function f to mock the orderRepository.GetOrders method
func (mmGetOrders *mOrderRepositoryMockGetOrders) Set(f func() (lp1 *dto.ListOrdersDto, err error)) *OrderRepositoryMock {
	if mmGetOrders.defaultExpectation != nil {
		mmGetOrders.mock.t.Fatalf("Default expectation is already set for the orderRepository.GetOrders method")
	}

	if len(mmGetOrders.expectations) > 0 {
		mmGetOrders.mock.t.Fatalf("Some expectations are already set for the orderRepository.GetOrders method")
	}

	mmGetOrders.mock.funcGetOrders = f
	mmGetOrders.mock.funcGetOrdersOrigin = minimock.CallerInfo(1)
	return mmGetOrders.mock
}

// Times sets number of times orderRepository.GetOrders should be invoked
func (mmGetOrders *mOrderRepositoryMockGetOrders) Times(n uint64) *mOrderRepositoryMockGetOrders {
	if n == 0 {
		mmGetOrders.mock.t.Fatalf("Times of OrderRepositoryMock.GetOrders mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetOrders.expectedInvocations, n)
	mmGetOrders.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetOrders
}

func (mmGetOrders *mOrderRepositoryMockGetOrders) invocationsDone() bool {
	if len(mmGetOrders.expectations) == 0 && mmGetOrders.defaultExpectation == nil && mmGetOrders.mock.funcGetOrders == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetOrders.mock.afterGetOrdersCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetOrders.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetOrders implements mm_usecase.orderRepository
func (mmGetOrders *OrderRepositoryMock) GetOrders() (lp1 *dto.ListOrdersDto, err error) {
	mm_atomic.AddUint64(&mmGetOrders.beforeGetOrdersCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOrders.afterGetOrdersCounter, 1)

	mmGetOrders.t.Helper()

	if mmGetOrders.inspectFuncGetOrders != nil {
		mmGetOrders.inspectFuncGetOrders()
	}

	if mmGetOrders.GetOrdersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOrders.GetOrdersMock.defaultExpectation.Counter, 1)

		mm_results := mmGetOrders.GetOrdersMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOrders.t.Fatal("No results are set for the OrderRepositoryMock.GetOrders")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmGetOrders.funcGetOrders != nil {
		return mmGetOrders.funcGetOrders()
	}
	mmGetOrders.t.Fatalf("Unexpected call to OrderRepositoryMock.GetOrders.")
	return
}

// GetOrdersAfterCounter returns a count of finished OrderRepositoryMock.GetOrders invocations
func (mmGetOrders *OrderRepositoryMock) GetOrdersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrders.afterGetOrdersCounter)
}

// GetOrdersBeforeCounter returns a count of OrderRepositoryMock.GetOrders invocations
func (mmGetOrders *OrderRepositoryMock) GetOrdersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrders.beforeGetOrdersCounter)
}

// MinimockGetOrdersDone returns true if the count of the GetOrders invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockGetOrdersDone() bool {
	if m.GetOrdersMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetOrdersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetOrdersMock.invocationsDone()
}

// MinimockGetOrdersInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockGetOrdersInspect() {
	for _, e := range m.GetOrdersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to OrderRepositoryMock.GetOrders")
		}
	}

	afterGetOrdersCounter := mm_atomic.LoadUint64(&m.afterGetOrdersCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetOrdersMock.defaultExpectation != nil && afterGetOrdersCounter < 1 {
		m.t.Errorf("Expected call to OrderRepositoryMock.GetOrders at\n%s", m.GetOrdersMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrders != nil && afterGetOrdersCounter < 1 {
		m.t.Errorf("Expected call to OrderRepositoryMock.GetOrders at\n%s", m.funcGetOrdersOrigin)
	}

	if !m.GetOrdersMock.invocationsDone() && afterGetOrdersCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderRepositoryMock.GetOrders at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetOrdersMock.expectedInvocations), m.GetOrdersMock.expectedInvocationsOrigin, afterGetOrdersCounter)
	}
}

type mOrderRepositoryMockInsertOrders struct {
	optional           bool
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockInsertOrdersExpectation
	expectations       []*OrderRepositoryMockInsertOrdersExpectation

	callArgs []*OrderRepositoryMockInsertOrdersParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderRepositoryMockInsertOrdersExpectation specifies expectation struct of the orderRepository.InsertOrders
type OrderRepositoryMockInsertOrdersExpectation struct {
	mock               *OrderRepositoryMock
	params             *OrderRepositoryMockInsertOrdersParams
	paramPtrs          *OrderRepositoryMockInsertOrdersParamPtrs
	expectationOrigins OrderRepositoryMockInsertOrdersExpectationOrigins
	results            *OrderRepositoryMockInsertOrdersResults
	returnOrigin       string
	Counter            uint64
}

// OrderRepositoryMockInsertOrdersParams contains parameters of the orderRepository.InsertOrders
type OrderRepositoryMockInsertOrdersParams struct {
	data *dto.ListOrdersDto
}

// OrderRepositoryMockInsertOrdersParamPtrs contains pointers to parameters of the orderRepository.InsertOrders
type OrderRepositoryMockInsertOrdersParamPtrs struct {
	data **dto.ListOrdersDto
}

// OrderRepositoryMockInsertOrdersResults contains results of the orderRepository.InsertOrders
type OrderRepositoryMockInsertOrdersResults struct {
	err error
}

// OrderRepositoryMockInsertOrdersOrigins contains origins of expectations of the orderRepository.InsertOrders
type OrderRepositoryMockInsertOrdersExpectationOrigins struct {
	origin     string
	originData string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) Optional() *mOrderRepositoryMockInsertOrders {
	mmInsertOrders.optional = true
	return mmInsertOrders
}

// Expect sets up expected params for orderRepository.InsertOrders
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) Expect(data *dto.ListOrdersDto) *mOrderRepositoryMockInsertOrders {
	if mmInsertOrders.mock.funcInsertOrders != nil {
		mmInsertOrders.mock.t.Fatalf("OrderRepositoryMock.InsertOrders mock is already set by Set")
	}

	if mmInsertOrders.defaultExpectation == nil {
		mmInsertOrders.defaultExpectation = &OrderRepositoryMockInsertOrdersExpectation{}
	}

	if mmInsertOrders.defaultExpectation.paramPtrs != nil {
		mmInsertOrders.mock.t.Fatalf("OrderRepositoryMock.InsertOrders mock is already set by ExpectParams functions")
	}

	mmInsertOrders.defaultExpectation.params = &OrderRepositoryMockInsertOrdersParams{data}
	mmInsertOrders.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmInsertOrders.expectations {
		if minimock.Equal(e.params, mmInsertOrders.defaultExpectation.params) {
			mmInsertOrders.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsertOrders.defaultExpectation.params)
		}
	}

	return mmInsertOrders
}

// ExpectDataParam1 sets up expected param data for orderRepository.InsertOrders
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) ExpectDataParam1(data *dto.ListOrdersDto) *mOrderRepositoryMockInsertOrders {
	if mmInsertOrders.mock.funcInsertOrders != nil {
		mmInsertOrders.mock.t.Fatalf("OrderRepositoryMock.InsertOrders mock is already set by Set")
	}

	if mmInsertOrders.defaultExpectation == nil {
		mmInsertOrders.defaultExpectation = &OrderRepositoryMockInsertOrdersExpectation{}
	}

	if mmInsertOrders.defaultExpectation.params != nil {
		mmInsertOrders.mock.t.Fatalf("OrderRepositoryMock.InsertOrders mock is already set by Expect")
	}

	if mmInsertOrders.defaultExpectation.paramPtrs == nil {
		mmInsertOrders.defaultExpectation.paramPtrs = &OrderRepositoryMockInsertOrdersParamPtrs{}
	}
	mmInsertOrders.defaultExpectation.paramPtrs.data = &data
	mmInsertOrders.defaultExpectation.expectationOrigins.originData = minimock.CallerInfo(1)

	return mmInsertOrders
}

// Inspect accepts an inspector function that has same arguments as the orderRepository.InsertOrders
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) Inspect(f func(data *dto.ListOrdersDto)) *mOrderRepositoryMockInsertOrders {
	if mmInsertOrders.mock.inspectFuncInsertOrders != nil {
		mmInsertOrders.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.InsertOrders")
	}

	mmInsertOrders.mock.inspectFuncInsertOrders = f

	return mmInsertOrders
}

// Return sets up results that will be returned by orderRepository.InsertOrders
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) Return(err error) *OrderRepositoryMock {
	if mmInsertOrders.mock.funcInsertOrders != nil {
		mmInsertOrders.mock.t.Fatalf("OrderRepositoryMock.InsertOrders mock is already set by Set")
	}

	if mmInsertOrders.defaultExpectation == nil {
		mmInsertOrders.defaultExpectation = &OrderRepositoryMockInsertOrdersExpectation{mock: mmInsertOrders.mock}
	}
	mmInsertOrders.defaultExpectation.results = &OrderRepositoryMockInsertOrdersResults{err}
	mmInsertOrders.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmInsertOrders.mock
}

// Set uses given function f to mock the orderRepository.InsertOrders method
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) Set(f func(data *dto.ListOrdersDto) (err error)) *OrderRepositoryMock {
	if mmInsertOrders.defaultExpectation != nil {
		mmInsertOrders.mock.t.Fatalf("Default expectation is already set for the orderRepository.InsertOrders method")
	}

	if len(mmInsertOrders.expectations) > 0 {
		mmInsertOrders.mock.t.Fatalf("Some expectations are already set for the orderRepository.InsertOrders method")
	}

	mmInsertOrders.mock.funcInsertOrders = f
	mmInsertOrders.mock.funcInsertOrdersOrigin = minimock.CallerInfo(1)
	return mmInsertOrders.mock
}

// When sets expectation for the orderRepository.InsertOrders which will trigger the result defined by the following
// Then helper
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) When(data *dto.ListOrdersDto) *OrderRepositoryMockInsertOrdersExpectation {
	if mmInsertOrders.mock.funcInsertOrders != nil {
		mmInsertOrders.mock.t.Fatalf("OrderRepositoryMock.InsertOrders mock is already set by Set")
	}

	expectation := &OrderRepositoryMockInsertOrdersExpectation{
		mock:               mmInsertOrders.mock,
		params:             &OrderRepositoryMockInsertOrdersParams{data},
		expectationOrigins: OrderRepositoryMockInsertOrdersExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmInsertOrders.expectations = append(mmInsertOrders.expectations, expectation)
	return expectation
}

// Then sets up orderRepository.InsertOrders return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockInsertOrdersExpectation) Then(err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockInsertOrdersResults{err}
	return e.mock
}

// Times sets number of times orderRepository.InsertOrders should be invoked
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) Times(n uint64) *mOrderRepositoryMockInsertOrders {
	if n == 0 {
		mmInsertOrders.mock.t.Fatalf("Times of OrderRepositoryMock.InsertOrders mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmInsertOrders.expectedInvocations, n)
	mmInsertOrders.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmInsertOrders
}

func (mmInsertOrders *mOrderRepositoryMockInsertOrders) invocationsDone() bool {
	if len(mmInsertOrders.expectations) == 0 && mmInsertOrders.defaultExpectation == nil && mmInsertOrders.mock.funcInsertOrders == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmInsertOrders.mock.afterInsertOrdersCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmInsertOrders.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// InsertOrders implements mm_usecase.orderRepository
func (mmInsertOrders *OrderRepositoryMock) InsertOrders(data *dto.ListOrdersDto) (err error) {
	mm_atomic.AddUint64(&mmInsertOrders.beforeInsertOrdersCounter, 1)
	defer mm_atomic.AddUint64(&mmInsertOrders.afterInsertOrdersCounter, 1)

	mmInsertOrders.t.Helper()

	if mmInsertOrders.inspectFuncInsertOrders != nil {
		mmInsertOrders.inspectFuncInsertOrders(data)
	}

	mm_params := OrderRepositoryMockInsertOrdersParams{data}

	// Record call args
	mmInsertOrders.InsertOrdersMock.mutex.Lock()
	mmInsertOrders.InsertOrdersMock.callArgs = append(mmInsertOrders.InsertOrdersMock.callArgs, &mm_params)
	mmInsertOrders.InsertOrdersMock.mutex.Unlock()

	for _, e := range mmInsertOrders.InsertOrdersMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsertOrders.InsertOrdersMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsertOrders.InsertOrdersMock.defaultExpectation.Counter, 1)
		mm_want := mmInsertOrders.InsertOrdersMock.defaultExpectation.params
		mm_want_ptrs := mmInsertOrders.InsertOrdersMock.defaultExpectation.paramPtrs

		mm_got := OrderRepositoryMockInsertOrdersParams{data}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.data != nil && !minimock.Equal(*mm_want_ptrs.data, mm_got.data) {
				mmInsertOrders.t.Errorf("OrderRepositoryMock.InsertOrders got unexpected parameter data, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmInsertOrders.InsertOrdersMock.defaultExpectation.expectationOrigins.originData, *mm_want_ptrs.data, mm_got.data, minimock.Diff(*mm_want_ptrs.data, mm_got.data))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsertOrders.t.Errorf("OrderRepositoryMock.InsertOrders got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmInsertOrders.InsertOrdersMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsertOrders.InsertOrdersMock.defaultExpectation.results
		if mm_results == nil {
			mmInsertOrders.t.Fatal("No results are set for the OrderRepositoryMock.InsertOrders")
		}
		return (*mm_results).err
	}
	if mmInsertOrders.funcInsertOrders != nil {
		return mmInsertOrders.funcInsertOrders(data)
	}
	mmInsertOrders.t.Fatalf("Unexpected call to OrderRepositoryMock.InsertOrders. %v", data)
	return
}

// InsertOrdersAfterCounter returns a count of finished OrderRepositoryMock.InsertOrders invocations
func (mmInsertOrders *OrderRepositoryMock) InsertOrdersAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertOrders.afterInsertOrdersCounter)
}

// InsertOrdersBeforeCounter returns a count of OrderRepositoryMock.InsertOrders invocations
func (mmInsertOrders *OrderRepositoryMock) InsertOrdersBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsertOrders.beforeInsertOrdersCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.InsertOrders.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsertOrders *mOrderRepositoryMockInsertOrders) Calls() []*OrderRepositoryMockInsertOrdersParams {
	mmInsertOrders.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockInsertOrdersParams, len(mmInsertOrders.callArgs))
	copy(argCopy, mmInsertOrders.callArgs)

	mmInsertOrders.mutex.RUnlock()

	return argCopy
}

// MinimockInsertOrdersDone returns true if the count of the InsertOrders invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockInsertOrdersDone() bool {
	if m.InsertOrdersMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.InsertOrdersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.InsertOrdersMock.invocationsDone()
}

// MinimockInsertOrdersInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockInsertOrdersInspect() {
	for _, e := range m.InsertOrdersMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.InsertOrders at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterInsertOrdersCounter := mm_atomic.LoadUint64(&m.afterInsertOrdersCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.InsertOrdersMock.defaultExpectation != nil && afterInsertOrdersCounter < 1 {
		if m.InsertOrdersMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderRepositoryMock.InsertOrders at\n%s", m.InsertOrdersMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.InsertOrders at\n%s with params: %#v", m.InsertOrdersMock.defaultExpectation.expectationOrigins.origin, *m.InsertOrdersMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsertOrders != nil && afterInsertOrdersCounter < 1 {
		m.t.Errorf("Expected call to OrderRepositoryMock.InsertOrders at\n%s", m.funcInsertOrdersOrigin)
	}

	if !m.InsertOrdersMock.invocationsDone() && afterInsertOrdersCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderRepositoryMock.InsertOrders at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.InsertOrdersMock.expectedInvocations), m.InsertOrdersMock.expectedInvocationsOrigin, afterInsertOrdersCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetOrdersInspect()

			m.MinimockInsertOrdersInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetOrdersDone() &&
		m.MinimockInsertOrdersDone()
}
